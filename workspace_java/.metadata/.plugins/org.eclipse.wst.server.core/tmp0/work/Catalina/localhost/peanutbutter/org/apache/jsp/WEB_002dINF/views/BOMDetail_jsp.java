/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2024-09-08 09:10:52 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;

public final class BOMDetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(6);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<style>\r\n");
      out.write("    * {\r\n");
      out.write("        box-sizing: border-box;\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .container {\r\n");
      out.write("        background-color: #F0F0E8;\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        height: 100%;\r\n");
      out.write("        box-sizing: border-box;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    body {\r\n");
      out.write("        margin: 0;\r\n");
      out.write("        padding: 0;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .top {\r\n");
      out.write("        color: #676767;\r\n");
      out.write("        font-size: 24px;\r\n");
      out.write("        font-weight: bold;\r\n");
      out.write("        height: 10vh;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .title {\r\n");
      out.write("        padding-top: 10px;\r\n");
      out.write("        margin-left: 50px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .title img {\r\n");
      out.write("        vertical-align: middle;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .title span {\r\n");
      out.write("        vertical-align: middle;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    table {\r\n");
      out.write("        border-collapse: collapse;\r\n");
      out.write("        width: 100%;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    th {\r\n");
      out.write("        height: 30px;\r\n");
      out.write("        text-align: center;\r\n");
      out.write("        background-color: #848484;\r\n");
      out.write("        color: white;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .tbody td {\r\n");
      out.write("        text-align: center;\r\n");
      out.write("        border-bottom: 1px solid rgb(218, 218, 218);\r\n");
      out.write("        height: 80px;\r\n");
      out.write("    }\r\n");
      out.write("    .tbody img {\r\n");
      out.write("        width: 80px;\r\n");
      out.write("        height: 80px;\r\n");
      out.write("    }\r\n");
      out.write("    .thead th {\r\n");
      out.write("        border-left: 1px solid white;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .thead th:nth-child(1) {\r\n");
      out.write("        width: 5%;\r\n");
      out.write("    }\r\n");
      out.write("    .thead th:nth-child(2) {\r\n");
      out.write("        width: 10%;\r\n");
      out.write("    }\r\n");
      out.write("    .thead th:nth-child(3) {\r\n");
      out.write("        width: 10%;\r\n");
      out.write("    }\r\n");
      out.write("    .thead th:nth-child(4) {\r\n");
      out.write("        width: 15%;\r\n");
      out.write("    }\r\n");
      out.write("    .thead th:nth-child(5) {\r\n");
      out.write("        width: 10%;\r\n");
      out.write("    }\r\n");
      out.write("    .thead th:nth-child(6) {\r\n");
      out.write("        width: 5%;\r\n");
      out.write("    }\r\n");
      out.write("    .thead th:nth-child(7) {\r\n");
      out.write("        width: 5%;\r\n");
      out.write("    }\r\n");
      out.write("    .thead th:nth-child(8) {\r\n");
      out.write("        width: 20%;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    .table_div{\r\n");
      out.write("        margin:0px 20px;\r\n");
      out.write("        background-color: white;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .pagination {\r\n");
      out.write("        display: flex;\r\n");
      out.write("        justify-content: center;\r\n");
      out.write("        list-style-type: none;\r\n");
      out.write("        padding: 0;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .pagination li {\r\n");
      out.write("        margin: 0 5px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .pagination a {\r\n");
      out.write("        display: block;\r\n");
      out.write("        padding: 8px 16px;\r\n");
      out.write("        text-decoration: none;\r\n");
      out.write("        color: #007bff;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .pagination a:hover {\r\n");
      out.write("        background-color: #ddd;\r\n");
      out.write("        border-radius: 5px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .pagination .active a {\r\n");
      out.write("        color: white;\r\n");
      out.write("        background-color: #007bff;\r\n");
      out.write("        border-radius: 5px;\r\n");
      out.write("    }\r\n");
      out.write("    #modi1, #save{\r\n");
      out.write("        padding: 5px;\r\n");
      out.write("        background-color: #3F3B3B;\r\n");
      out.write("        color: white;\r\n");
      out.write("        border-radius: 5px;\r\n");
      out.write("        cursor: pointer;\r\n");
      out.write("    }\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"top\">\r\n");
      out.write("            <div class=\"title\">\r\n");
      out.write("                <img src=\"image/BOM.png\" style=\"width: 30px;\">\r\n");
      out.write("                ");
  
                    String productName = request.getParameter("productName");
                    int currentPage = Integer.parseInt(request.getParameter("page") != null ? request.getParameter("page") : "1");
                    int pageSize = 10; // 페이지당 항목 수

                    int totalPages = 0; // totalPages 변수 정의
                
      out.write("\r\n");
      out.write("                <span>");
      out.print( productName );
      out.write("</span>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"table_div\">\r\n");
      out.write("            <table class=\"table\">\r\n");
      out.write("                <thead class=\"thead\">\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <th></th>\r\n");
      out.write("                        <th>부품코드</th>\r\n");
      out.write("                        <th>부품분류</th>\r\n");
      out.write("                        <th>모델</th>\r\n");
      out.write("                        <th>이미지</th>\r\n");
      out.write("                        <th>개수</th>\r\n");
      out.write("                        <th></th>\r\n");
      out.write("                        <th></th>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                </thead>\r\n");
      out.write("                <tbody class=\"tbody\">\r\n");
      out.write("                    ");

                        Connection conn = null;
                        PreparedStatement pstmt = null;
                        ResultSet rs = null;
                        try {
                            Class.forName("oracle.jdbc.driver.OracleDriver");
                            conn = DriverManager.getConnection("jdbc:oracle:thin:@125.181.132.133:51521:xe", "scott2_9", "tiger");

                            // 총 레코드 수를 조회
                            String countQuery = "SELECT COUNT(*) FROM BOMREG WHERE product_list LIKE ?";
                            pstmt = conn.prepareStatement(countQuery);
                            pstmt.setString(1, "%" + productName + "%");
                            rs = pstmt.executeQuery();
                            rs.next();
                            int totalRecords = rs.getInt(1);
                            totalPages = (int) Math.ceil(totalRecords / (double) pageSize); // totalPages 계산

                            // 페이지에 맞는 레코드를 조회
                            String query = "SELECT * FROM (SELECT a.*, ROW_NUMBER() OVER (ORDER BY part_code) rnum FROM BOMREG a WHERE product_list LIKE ?) WHERE rnum BETWEEN ? AND ?";
                            pstmt = conn.prepareStatement(query);
                            pstmt.setString(1, "%" + productName + "%");
                            pstmt.setInt(2, (currentPage - 1) * pageSize + 1);
                            pstmt.setInt(3, currentPage * pageSize);
                            rs = pstmt.executeQuery();
                            
                            while (rs.next()) {
                                String partCode = rs.getString("part_code");
                                String partName = rs.getString("part_name");
                                String modelName = rs.getString("model_name");
                                String mount = rs.getString("mount");
                    
      out.write("\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td></td>\r\n");
      out.write("                        <td>");
      out.print( partCode );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( partName );
      out.write("</td>\r\n");
      out.write("                        <td>");
      out.print( modelName );
      out.write("</td>\r\n");
      out.write("                        <td>이미지 주소</td>\r\n");
      out.write("                        <td class=\"modi\">");
      out.print( mount );
      out.write("</td>\r\n");
      out.write("                        <td class=\"modi\"></td>\r\n");
      out.write("                        <td class=\"modi\"></td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                    ");

                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        } finally {
                            if (rs != null) try { rs.close(); } catch (SQLException e) { }
                            if (pstmt != null) try { pstmt.close(); } catch (SQLException e) { }
                            if (conn != null) try { conn.close(); } catch (SQLException e) { }
                        }
                    
      out.write("\r\n");
      out.write("                </tbody>\r\n");
      out.write("            </table>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("        <div class=\"pagination\">\r\n");
      out.write("            ");

                for (int i = 1; i <= totalPages; i++) {
                    if (i == currentPage) {
            
      out.write("\r\n");
      out.write("            <li class=\"active\"><a href=\"?productName=");
      out.print( productName );
      out.write("&page=");
      out.print( i );
      out.write('"');
      out.write('>');
      out.print( i );
      out.write("</a></li>\r\n");
      out.write("            ");

                    } else {
            
      out.write("\r\n");
      out.write("            <li><a href=\"?productName=");
      out.print( productName );
      out.write("&page=");
      out.print( i );
      out.write('"');
      out.write('>');
      out.print( i );
      out.write("</a></li>\r\n");
      out.write("            ");

                    }
                }
            
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        let isProcessing = false;\r\n");
      out.write("        function mody() {\r\n");
      out.write("            if (isProcessing) return;\r\n");
      out.write("            isProcessing = true; \r\n");
      out.write("\r\n");
      out.write("            let modiElements = document.querySelectorAll('.modi');\r\n");
      out.write("            modiElements.forEach(element => {\r\n");
      out.write("                let currentText = element.textContent;\r\n");
      out.write("                element.innerHTML = `<input type=\"text\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${currentText}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">`;\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        function saveChanges() {\r\n");
      out.write("            let modiElements = document.querySelectorAll('.modi');\r\n");
      out.write("\r\n");
      out.write("            modiElements.forEach(element => {\r\n");
      out.write("                let inputField = element.querySelector('input');\r\n");
      out.write("                if (inputField) {\r\n");
      out.write("                    let updatedText = inputField.value;\r\n");
      out.write("                    element.innerHTML = updatedText; \r\n");
      out.write("                }\r\n");
      out.write("            });\r\n");
      out.write("            isProcessing = false;\r\n");
      out.write("        }\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
