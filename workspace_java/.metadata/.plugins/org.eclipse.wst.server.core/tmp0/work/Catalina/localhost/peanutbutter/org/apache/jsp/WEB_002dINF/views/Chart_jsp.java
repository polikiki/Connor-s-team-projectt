/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2024-09-08 11:04:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Chart_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <title>종합 모니터링 대시보드</title>\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\r\n");
      out.write("    <script src=\"https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels\"></script>\r\n");
      out.write("    <style>\r\n");
      out.write("        * {\r\n");
      out.write("            box-sizing: border-box;\r\n");
      out.write("        }\r\n");
      out.write("    </style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("    <div style=\"width: 100%; margin-top: 50px;\">\r\n");
      out.write("        <div style=\"width: 70%;display: inline-block;\">\r\n");
      out.write("            <canvas id=\"combinedChart\"></canvas>\r\n");
      out.write("\r\n");
      out.write("        </div>\r\n");
      out.write("        <div style=\"width: 29%; display: inline-block; margin-bottom: 30px;\">\r\n");
      out.write("            <canvas id=\"productSalesChart\"></canvas>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        const combinedCtx = document.getElementById('combinedChart').getContext('2d');\r\n");
      out.write("        const combinedChart = new Chart(combinedCtx, {\r\n");
      out.write("            type: 'bar', \r\n");
      out.write("            data: {\r\n");
      out.write("                labels: ['1월', '2월', '3월', '4월', '5월', '6월', '7월', '8월'],\r\n");
      out.write("                datasets: [\r\n");
      out.write("                    {\r\n");
      out.write("                        type: 'bar', \r\n");
      out.write("                        label: '목표 매출액',\r\n");
      out.write("                        data: [13000, 16000, 14000, 18000, 17000, 20000, 21000, 22000],\r\n");
      out.write("                        backgroundColor: 'rgba(153, 102, 255, 0.2)',\r\n");
      out.write("                        borderColor: 'rgba(153, 102, 255, 1)',\r\n");
      out.write("                        borderWidth: 1\r\n");
      out.write("                    },\r\n");
      out.write("                    {\r\n");
      out.write("                        type: 'bar', \r\n");
      out.write("                        label: '실제 매출액',\r\n");
      out.write("                        data: [12000, 15000, 13000, 17000, 16000, 18000, null, null],\r\n");
      out.write("                        backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n");
      out.write("                        borderColor: 'rgba(75, 192, 192, 1)',\r\n");
      out.write("                        borderWidth: 1\r\n");
      out.write("                    },\r\n");
      out.write("                    {\r\n");
      out.write("                        type: 'line',\r\n");
      out.write("                        label: '실적 매출액',\r\n");
      out.write("                        data: [12000, 15000, 13000, 17000, 16000, 18000, null, null],\r\n");
      out.write("                        borderColor: 'rgba(75, 192, 192, 1)',\r\n");
      out.write("                        backgroundColor: 'rgba(75, 192, 192, 0.2)',\r\n");
      out.write("                        fill: false\r\n");
      out.write("                    },\r\n");
      out.write("                    {\r\n");
      out.write("                        type: 'line', \r\n");
      out.write("                        label: '예상 매출액',\r\n");
      out.write("                        data: [null, null, null, null, null, 18000, 20000, 21000],\r\n");
      out.write("                        borderColor: 'rgba(255, 99, 132, 1)',\r\n");
      out.write("                        backgroundColor: 'rgba(255, 99, 132, 0.2)',\r\n");
      out.write("                        fill: false,\r\n");
      out.write("                        borderDash: [5, 5]\r\n");
      out.write("                    }\r\n");
      out.write("                ]\r\n");
      out.write("            },\r\n");
      out.write("            options: {\r\n");
      out.write("                responsive: true,\r\n");
      out.write("                scales: {\r\n");
      out.write("                    x: {\r\n");
      out.write("                        display: true,\r\n");
      out.write("                        title: {\r\n");
      out.write("                            display: true,\r\n");
      out.write("                            text: '월'\r\n");
      out.write("                        }\r\n");
      out.write("                    },\r\n");
      out.write("                    y: {\r\n");
      out.write("                        display: true,\r\n");
      out.write("                        title: {\r\n");
      out.write("                            display: true,\r\n");
      out.write("                            text: '매출액 (단위: 만 원)'\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        const productSalesCtx = document.getElementById('productSalesChart').getContext('2d');\r\n");
      out.write("        const productSalesChart = new Chart(productSalesCtx, {\r\n");
      out.write("            type: 'doughnut',\r\n");
      out.write("            data: {\r\n");
      out.write("                labels: ['LG그램 14인치', 'LG그램 15인치', '삼성노트북'],\r\n");
      out.write("                datasets: [\r\n");
      out.write("                    {\r\n");
      out.write("                        label: '매출액',\r\n");
      out.write("                        data: [5000, 7000, 4000],\r\n");
      out.write("                        backgroundColor: [\r\n");
      out.write("                            'rgba(255, 99, 132, 0.2)',\r\n");
      out.write("                            'rgba(54, 162, 235, 0.2)',\r\n");
      out.write("                            'rgba(255, 206, 86, 0.2)',\r\n");
      out.write("\r\n");
      out.write("                        ],\r\n");
      out.write("                        borderColor: [\r\n");
      out.write("                            'rgba(255, 99, 132, 1)',\r\n");
      out.write("                            'rgba(54, 162, 235, 1)',\r\n");
      out.write("                            'rgba(255, 206, 86, 1)',\r\n");
      out.write("\r\n");
      out.write("                        ],\r\n");
      out.write("                        borderWidth: 1\r\n");
      out.write("                    }\r\n");
      out.write("                ]\r\n");
      out.write("            },\r\n");
      out.write("            options: {\r\n");
      out.write("                responsive: true,\r\n");
      out.write("                plugins: {\r\n");
      out.write("                    legend: {\r\n");
      out.write("                        display: true,\r\n");
      out.write("                        position: 'top',\r\n");
      out.write("                        labels: {\r\n");
      out.write("                            boxWidth: 10, \r\n");
      out.write("                            font: {\r\n");
      out.write("                                size: 12 \r\n");
      out.write("                            }\r\n");
      out.write("                        }\r\n");
      out.write("                    },\r\n");
      out.write("                    datalabels: {\r\n");
      out.write("                        formatter: (value, context) => {\r\n");
      out.write("                            const total = context.chart.data.datasets[0].data.reduce((acc, val) => acc + val, 0);\r\n");
      out.write("                            const percentage = (value / total * 100).toFixed(2) + '%';\r\n");
      out.write("                            return percentage;\r\n");
      out.write("                        },\r\n");
      out.write("                        color: 'gray',\r\n");
      out.write("                        font: {\r\n");
      out.write("                            weight: 'bold',\r\n");
      out.write("                            size: '20px',\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("            },\r\n");
      out.write("            plugins: [ChartDataLabels]\r\n");
      out.write("        });\r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
