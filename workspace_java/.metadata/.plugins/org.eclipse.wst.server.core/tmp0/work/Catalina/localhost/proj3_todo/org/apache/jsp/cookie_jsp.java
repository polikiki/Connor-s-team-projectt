/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2024-08-20 03:23:43 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class cookie_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<style>\r\n");
      out.write("	.popup {\r\n");
      out.write("		width: 200px;\r\n");
      out.write("		height: 500px;\r\n");
      out.write("		border: 1px solid black;\r\n");
      out.write("		\r\n");
      out.write("	}\r\n");
      out.write("	.hide {\r\n");
      out.write("		display: none;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<div class = \"popup\">\r\n");
      out.write("\r\n");
      out.write("공지사항입니다.<br>\r\n");
      out.write("\r\n");
      out.write("<input type=\"checkbox\" id=\"popupShow\"> 10초 동안 보이지 않기\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	popupNoShow();\r\n");
      out.write("	function popupNoShow(){\r\n");
      out.write("		// 모든 쿠키 가져오기 : return은 String\r\n");
      out.write("		console.log(document.cookie);	// name2=value2; a= a1; b=b1; popupNoShow = true\r\n");
      out.write("		// 쿠키별로 배열로 만들기\r\n");
      out.write("		const aCookie = document.cookie.split(\"; \");\r\n");
      out.write("		for(let i=0; i<aCookie.length; i++){\r\n");
      out.write("			// 쿠키의 이름과 값을 구분하기\r\n");
      out.write("			const cookie = aCookie[i].split(\"=\")\r\n");
      out.write("			const name = cookie[0]; \r\n");
      out.write("			const value = cookie[1];\r\n");
      out.write("			\r\n");
      out.write("			// 내가 원하는 이름과 값인지 판별\r\n");
      out.write("			if(name == \"popupNoShow\" && value == \"true\"){\r\n");
      out.write("				document.querySelector(\".popup\").classList.add(\"hide\");\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("\r\n");
      out.write("	document.querySelector(\"#popupShow\").addEventListener(\"click\", function(event){\r\n");
      out.write("	\r\n");
      out.write("		let checked = event.target.checked;\r\n");
      out.write("		console.log(\"체크 여부 :\"+ checked);\r\n");
      out.write("		document.cookie = 'a=a1';\r\n");
      out.write("		document.cookie = 'b=b1';\r\n");
      out.write("		console.log(document.cookie);\r\n");
      out.write("		console.log(new Date());\r\n");
      out.write("		\r\n");
      out.write("		if(checked) {\r\n");
      out.write("			\r\n");
      out.write("			// 10초 뒤 시간 가져오기			\r\n");
      out.write("			const now = new Date(); // 현재시간\r\n");
      out.write("			console.log(now.toGMTString());\r\n");
      out.write("			// getSeconds : 지금 시간의 초를 가져오기\r\n");
      out.write("			const after_10s = now.getSeconds() + 10;	// 10초뒤 시간가져오기\r\n");
      out.write("			now.setSeconds(after_10s); // 초단위 재설정\r\n");
      out.write("			console.log(now.toGMTString());\r\n");
      out.write("			\r\n");
      out.write("			document.cookie = \"popupNoShow=true;expires=\"+now.toGMTString()\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
