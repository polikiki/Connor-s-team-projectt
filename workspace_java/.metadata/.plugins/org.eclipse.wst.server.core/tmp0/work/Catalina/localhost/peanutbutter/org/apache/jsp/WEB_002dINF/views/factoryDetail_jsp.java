/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.91
 * Generated at: 2024-09-08 06:36:48 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

public final class factoryDetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(10);
    _jspx_imports_classes.add("java.sql.SQLException");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.ResultSet");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("      * {\r\n");
      out.write("        box-sizing: border-box;\r\n");
      out.write("\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .container {\r\n");
      out.write("        background-color: #F0F0E8;\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        height: 100%;\r\n");
      out.write("        box-sizing: border-box;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    body {\r\n");
      out.write("        margin: 0;\r\n");
      out.write("        padding: 0;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .top {\r\n");
      out.write("        margin: 0px 50px;\r\n");
      out.write("        color: #676767;\r\n");
      out.write("        font-size: 24px;\r\n");
      out.write("        font-weight: bold;\r\n");
      out.write("        height: 50px;\r\n");
      out.write("        display: flex;\r\n");
      out.write("        align-items: center;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .section {\r\n");
      out.write("        margin: 0 20px;\r\n");
      out.write("        height: 78vh;\r\n");
      out.write("        background-color: #E9E4DC;\r\n");
      out.write("        overflow: auto;\r\n");
      out.write("        padding: 30px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .span,\r\n");
      out.write("    .spanMargin {\r\n");
      out.write("        font-size: 20px;\r\n");
      out.write("        display: inline-block;\r\n");
      out.write("        width: 100px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .inputText {\r\n");
      out.write("        height: 30px;\r\n");
      out.write("        margin-left: 10px;\r\n");
      out.write("        border-radius: 5px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .spanMargin {\r\n");
      out.write("        margin-left: 50px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .select {\r\n");
      out.write("        height: 30px;\r\n");
      out.write("        border-radius: 5px;\r\n");
      out.write("        margin-left: 70px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .select2 {\r\n");
      out.write("        height: 30px;\r\n");
      out.write("        border-radius: 5px;\r\n");
      out.write("        margin-left: 35px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .div {\r\n");
      out.write("        margin-top: 10px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .tableDiv {\r\n");
      out.write("        margin-top: 10px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    table {\r\n");
      out.write("        border-collapse: collapse;\r\n");
      out.write("        width: 100%;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    th {\r\n");
      out.write("        height: 30px;\r\n");
      out.write("        text-align: center;\r\n");
      out.write("        background-color: #848484;\r\n");
      out.write("        color: white;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .tbody td {\r\n");
      out.write("        text-align: center;\r\n");
      out.write("        padding: 5px;\r\n");
      out.write("        border-bottom: 1px solid rgb(218, 218, 218);\r\n");
      out.write("        padding: 10px 0px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .thead th:nth-child(1) {\r\n");
      out.write("        width: 5%;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .thead th:nth-child(2) {\r\n");
      out.write("        width: 5%;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .thead th:nth-child(3) {\r\n");
      out.write("        width: 15%;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .thead th:nth-child(4) {\r\n");
      out.write("        width: 15%;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .thead th:nth-child(5) {\r\n");
      out.write("        width: 10%;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .thead th:nth-child(6) {\r\n");
      out.write("        width: 50%;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    .rowSpan {\r\n");
      out.write("        padding: 5px;\r\n");
      out.write("        background-color: #3F3B3B;\r\n");
      out.write("        border-radius: 5px;\r\n");
      out.write("        color: white;\r\n");
      out.write("        margin-left: 20px;\r\n");
      out.write("    }\r\n");
      out.write("    .btnDiv{\r\n");
      out.write("        margin:5px 20px;\r\n");
      out.write("        display: flex;\r\n");
      out.write("        justify-content: end;\r\n");
      out.write("    }\r\n");
      out.write("    .Btn_css {\r\n");
      out.write("        padding: 15px;\r\n");
      out.write("        background-color: #3F3B3B;\r\n");
      out.write("        color: white;\r\n");
      out.write("        border-radius: 5px;\r\n");
      out.write("        cursor: pointer;\r\n");
      out.write("        margin-right: 20px;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<body>\r\n");
      out.write("<form action=\"UpdateProcessServlet\" method=\"post\">\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("        <div class=\"top\">\r\n");
      out.write("            <img src=\"image/BOM.png\" style=\"width: 30px;\">\r\n");
      out.write("            <span>공정 수정</span>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"section\">\r\n");
      out.write("            ");

                String processCode5 = request.getParameter("processCode5");

                String processCode = "";
                String processName = "";
                String processCategory = "";
                String isUsed = "";
                String cycleTime = "";
                String productCode = "";
                List<String[]> underProcesses = new ArrayList<>();

                if (processCode5 != null && !processCode5.isEmpty()) {
                    Connection conn = null;
                    PreparedStatement pstmt = null;
                    ResultSet rs = null;

                    try {
                        Class.forName("oracle.jdbc.driver.OracleDriver");
                        String jdbcURL = "jdbc:oracle:thin:@125.181.132.133:51521:xe";
                        String jdbcUsername = "scott2_9";
                        String jdbcPassword = "tiger";
                        conn = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);

                        
                        String sql = "SELECT * FROM process WHERE process_code = ?";
                        pstmt = conn.prepareStatement(sql);
                        pstmt.setString(1, processCode5);
                        rs = pstmt.executeQuery();

                        if (rs.next()) {
                            processCode = rs.getString("process_code");
                            processName = rs.getString("process_name");
                            processCategory = rs.getString("process_category");
                            isUsed = rs.getString("is_used");
                            cycleTime = rs.getString("cycle_time");
                            productCode = rs.getString("product_code");
                        }

                       
                        String sql2 = "SELECT * FROM process2 WHERE process_code = ? ORDER BY sequence_number ASC";
                        pstmt = conn.prepareStatement(sql2);
                        pstmt.setString(1, processCode5);
                        rs = pstmt.executeQuery();

                        while (rs.next()) {
                            String underProcessCode = rs.getString("underprocess");
                            String underProcessName = rs.getString("processname2");
                            String underProcessImage = rs.getString("image");
                            String underProcessContent = rs.getString("productcontent");
                            underProcesses.add(new String[] {underProcessCode, underProcessName, underProcessImage, underProcessContent});
                        }
                    } catch (ClassNotFoundException | SQLException e) {
                        e.printStackTrace();
                    } finally {
                        try {
                            if (rs != null) rs.close();
                            if (pstmt != null) pstmt.close();
                            if (conn != null) conn.close();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                    }
                }
            
      out.write("\r\n");
      out.write("\r\n");
      out.write("            <div style=\"margin-left: 150px;\">\r\n");
      out.write("                <input type=\"hidden\" id=\"processCodeHidden\" name=\"processCodeHidden\" value=\"");
      out.print( processCode );
      out.write("\">\r\n");
      out.write("                <div>\r\n");
      out.write("                    <span class=\"span\">공정코드</span><input id=\"processCode\" name=\"processCode\" class=\"inputText\" type=\"text\" value=\"");
      out.print( processCode );
      out.write("\" readonly>");
      out.write("\r\n");
      out.write("                    <span class=\"spanMargin\">공정명</span><input id=\"processName\" name=\"processName\" class=\"inputText\" type=\"text\" value=\"");
      out.print( processName );
      out.write("\">\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"div\">\r\n");
      out.write("                    <span class=\"span\">공정분류</span><input id=\"processCategory\" name=\"processCategory\" class=\"inputText\" type=\"text\" value=\"");
      out.print( processCategory );
      out.write("\">\r\n");
      out.write("                    <span class=\"spanMargin\">사용여부</span>\r\n");
      out.write("                    <select id=\"isUsed\" name=\"isUsed\" class=\"select\">\r\n");
      out.write("                        <option value=\"Y\" ");
      out.print( "Y".equals(isUsed) ? "selected" : "" );
      out.write(">Y</option>\r\n");
      out.write("                        <option value=\"N\" ");
      out.print( "N".equals(isUsed) ? "selected" : "" );
      out.write(">N</option>\r\n");
      out.write("                    </select>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div class=\"div\">\r\n");
      out.write("                    <span class=\"span\">사이클타임</span><input id=\"cycleTime\" name=\"cycleTime\" class=\"inputText\" type=\"text\" value=\"");
      out.print( cycleTime );
      out.write("\">\r\n");
      out.write("                    <span class=\"spanMargin\">제품코드</span>\r\n");
      out.write(" <select id=\"productCode\" name=\"productCode\" class=\"select2\" onchange=\"updateProductDescription()\">\r\n");
      out.write("        <option value=\"\">-----</option>\r\n");
      out.write("        ");
 
            Connection conn = null;
            PreparedStatement pstmt = null;
            ResultSet rs = null;
            
            try {
                
                Class.forName("oracle.jdbc.driver.OracleDriver");

                
                String jdbcURL = "jdbc:oracle:thin:@125.181.132.133:51521:xe";
                String jdbcUsername = "scott2_9";
                String jdbcPassword = "tiger";
                conn = DriverManager.getConnection(jdbcURL, jdbcUsername, jdbcPassword);

                
                String sql = "SELECT product_code FROM TABLE_PM ORDER BY product_code ASC";
                pstmt = conn.prepareStatement(sql);
                rs = pstmt.executeQuery();

                
                while (rs.next()) {
                    String code = rs.getString("product_code");
        
      out.write("\r\n");
      out.write("                    <option value=\"");
      out.print( code );
      out.write('"');
      out.write('>');
      out.print( code );
      out.write("</option>\r\n");
      out.write("        ");

                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                
                if (rs != null) try { rs.close(); } catch (Exception e) { e.printStackTrace(); }
                if (pstmt != null) try { pstmt.close(); } catch (Exception e) { e.printStackTrace(); }
                if (conn != null) try { conn.close(); } catch (Exception e) { e.printStackTrace(); }
            }
        
      out.write("\r\n");
      out.write("    </select>\r\n");
      out.write("                </div>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div style=\"margin-top: 10px; display: flex; justify-content: end;\">\r\n");
      out.write("                <span class=\"rowSpan\" onclick=\"addRow()\">행추가</span>\r\n");
      out.write("                <span class=\"rowSpan\" onclick=\"deleteSelectedRows()\">행삭제</span>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div class=\"tableDiv\">\r\n");
      out.write("                <table class=\"table\">\r\n");
      out.write("                    <thead class=\"thead\">\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <th></th>\r\n");
      out.write("                            <th></th>\r\n");
      out.write("                            <th>하위공정코드</th>\r\n");
      out.write("                            <th>공정명</th>\r\n");
      out.write("                            <th>이미지</th>\r\n");
      out.write("                            <th>공정내용</th>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                    </thead>\r\n");
      out.write("                    <tbody class=\"tbody\">\r\n");
      out.write("                        ");
 
                            for (String[] underProcess : underProcesses) {
                                String underProcessCode = underProcess[0];
                                String underProcessName = underProcess[1];
                                String underProcessImage = underProcess[2];
                                String underProcessContent = underProcess[3];
                        
      out.write("\r\n");
      out.write("                        <tr>\r\n");
      out.write("                            <td><input type=\"checkbox\" class=\"delete-checkbox\"></td>\r\n");
      out.write("                            <td></td>\r\n");
      out.write("                            <td><input name=\"underprocess\" type=\"text\" style=\"width: 90%;\" value=\"");
      out.print( underProcessCode );
      out.write("\"></td>\r\n");
      out.write("                            <td><input name=\"processname2\" type=\"text\" style=\"width: 90%;\" value=\"");
      out.print( underProcessName );
      out.write("\"></td>\r\n");
      out.write("                            <td><input name=\"image\" type=\"file\" style=\"width: 90%;\" value=\"");
      out.print( underProcessImage );
      out.write("\"></td>\r\n");
      out.write("                            <td><input name=\"productcontent\" type=\"text\" style=\"width: 90%; text-align: center;\" value=\"");
      out.print( underProcessContent );
      out.write("\"></td>\r\n");
      out.write("                        </tr>\r\n");
      out.write("                        ");
 } 
      out.write("\r\n");
      out.write("                    </tbody>\r\n");
      out.write("                </table>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"btnDiv\">\r\n");
      out.write("            <span class=\"Btn_css\" onclick=\"commitReg()\">수정</span>\r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</form>\r\n");
      out.write("</body>\r\n");
      out.write("<script>\r\n");
      out.write("let count = ");
      out.print( underProcesses.size() + 1 );
      out.write(";\r\n");
      out.write("\r\n");
      out.write("function commitReg() {\r\n");
      out.write("    let processCode = document.getElementById('processCode').value.trim();\r\n");
      out.write("    let processName = document.getElementById('processName').value.trim();\r\n");
      out.write("    let processCategory = document.getElementById('processCategory').value.trim();\r\n");
      out.write("    let isUsed = document.getElementById('isUsed').value.trim();\r\n");
      out.write("    let cycleTime = document.getElementById('cycleTime').value.trim();\r\n");
      out.write("    let productCode = document.getElementById('productCode').value.trim();\r\n");
      out.write("    let processCodeHidden = document.getElementById('processCodeHidden').value.trim();\r\n");
      out.write("\r\n");
      out.write("    if (!processCode || !processName || !processCategory || !isUsed || !cycleTime || !productCode) {\r\n");
      out.write("        alert(\"모든 필수 입력 필드를 채워주세요.\");\r\n");
      out.write("        return;\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    let underProcessData = [];\r\n");
      out.write("    let processNameData = [];\r\n");
      out.write("    let productContentData = [];\r\n");
      out.write("    let imageData = [];\r\n");
      out.write("    let processCodeData = [];\r\n");
      out.write("	\r\n");
      out.write("    document.querySelectorAll('input[name=\"underprocess\"]').forEach(input => {\r\n");
      out.write("        underProcessData.push(input.value.trim());\r\n");
      out.write("    });\r\n");
      out.write("    \r\n");
      out.write("    document.querySelectorAll('input[name=\"processname2\"]').forEach(input => {\r\n");
      out.write("        processNameData.push(input.value.trim());\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    document.querySelectorAll('input[name=\"productcontent\"]').forEach(input => {\r\n");
      out.write("        productContentData.push(input.value.trim());\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    document.querySelectorAll('input[name=\"image\"]').forEach(input => {\r\n");
      out.write("        imageData.push(input.value.trim());\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    document.querySelectorAll('input[name=\"underprocess\"]').forEach(() => {\r\n");
      out.write("        processCodeData.push(processCode);\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    let form1 = document.createElement('form');\r\n");
      out.write("    form1.method = 'POST';\r\n");
      out.write("    form1.action = 'UpdateProcessServlet';\r\n");
      out.write("\r\n");
      out.write("    let fields1 = {\r\n");
      out.write("        processCode, processName, processCategory, isUsed, cycleTime, productCode, processCodeHidden\r\n");
      out.write("    };\r\n");
      out.write("    for (let key in fields1) {\r\n");
      out.write("        let input = document.createElement('input');\r\n");
      out.write("        input.type = 'hidden';\r\n");
      out.write("        input.name = key;\r\n");
      out.write("        input.value = fields1[key];\r\n");
      out.write("        form1.appendChild(input);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    document.body.appendChild(form1);\r\n");
      out.write("    form1.submit();\r\n");
      out.write("    \r\n");
      out.write("   \r\n");
      out.write("    setTimeout(() => {  \r\n");
      out.write("    	 let form2 = document.createElement('form');\r\n");
      out.write("    	    form2.method = 'POST';\r\n");
      out.write("    	    form2.action = 'UpdateProcessServlet';\r\n");
      out.write("    	    let dataFields = {\r\n");
      out.write("    	        underProcessData,\r\n");
      out.write("    	        processNameData,\r\n");
      out.write("    	        productContentData,\r\n");
      out.write("    	        imageData,\r\n");
      out.write("    	        processCodeData\r\n");
      out.write("    	    };\r\n");
      out.write("\r\n");
      out.write("    	    for (let key in dataFields) {\r\n");
      out.write("    	        let input = document.createElement('input');\r\n");
      out.write("    	        input.type = 'hidden';\r\n");
      out.write("    	        input.name = key;\r\n");
      out.write("    	        input.value = dataFields[key];\r\n");
      out.write("    	        form2.appendChild(input);\r\n");
      out.write("    	    }\r\n");
      out.write("        document.body.appendChild(form2);\r\n");
      out.write("        form2.submit();\r\n");
      out.write("    }, 300);\r\n");
      out.write("\r\n");
      out.write("    alert(\"수정완료\");\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("function addRow() {\r\n");
      out.write("    let tbody = document.querySelector('.tbody');\r\n");
      out.write("    let newRow = document.createElement('tr');\r\n");
      out.write("    newRow.innerHTML = `\r\n");
      out.write("        <td><input type=\"checkbox\" class=\"delete-checkbox\"></td>\r\n");
      out.write("        <td></td>\r\n");
      out.write("        <td><input name=\"underprocess\" type=\"text\" style=\"width: 90%;\"></td>\r\n");
      out.write("        <td><input name=\"processname2\" type=\"text\" style=\"width: 90%;\"></td>\r\n");
      out.write("        <td><input name=\"image\" type=\"file\" style=\"width: 90%;\"></td>\r\n");
      out.write("        <td><input name=\"productcontent\" type=\"text\" style=\"width: 90%; text-align: center;\"></td>`;\r\n");
      out.write("    tbody.appendChild(newRow);\r\n");
      out.write("   \r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function deleteSelectedRows() {\r\n");
      out.write("    let checkboxes = document.querySelectorAll('.delete-checkbox');\r\n");
      out.write("    checkboxes.forEach(checkbox => {\r\n");
      out.write("        if (checkbox.checked) {\r\n");
      out.write("            checkbox.closest('tr').remove();\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("function updateProductDescription() {\r\n");
      out.write("    const selectedCode = document.getElementById(\"productCode\").value;\r\n");
      out.write("    console.log(\"Selected product code: \" + selectedCode);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
